
user  root;
worker_processes  1;
daemon off; #off for debug
master_process off; #off for debug

#worker_priority -20;
worker_cpu_affinity 01;
worker_rlimit_nofile 65535;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;
#error_log  "pipe:rollback logs/error_log interval=1d baknum=7 maxsize=2G";

#error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  100000;
    accept_mutex off;
}

http {
    map $http_connection $connection_keepalive {
            default keep-alive;
            '' '';
            keep-alive keep-alive;
            upgrade upgrade;
            close keep-alive;
    } 
   	map $http_connection $connection_upgrade {
            default close;
            '' '';
            keep-alive keep-alive;
            upgrade upgrade;
            close close;
    }

    include       mime.types;
    default_type  application/octet-stream;
    #req_status_zone server "$host,$server_addr:$server_port" 10M;
    #req_status server;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;
    #access_log  "pipe:rollback logs/access_log interval=1d baknum=7 maxsize=2G"  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    #upstream cluster1 {
    #        # simple round-robin
    #        server 192.168.78.3:80;
    #
    #        check interval=3000 rise=2 fall=5 timeout=1000 type=http;
    #        check_http_send "HEAD / HTTP/1.0\r\n\r\n";
    #        check_http_expect_alive http_2xx http_3xx;
    #}

    upstream melon_80_keepalive {
        server 192.168.78.4:90;
        keepalive 2048;
        #keepalive 1024 slice_key=$remote_addr$remote_port slice_conn=2;
        #keepalive_timeout 540000;
    }

    upstream melon_80 {
        server 192.168.78.4;
        #server 0.0.0.0:90;
        keepalive 2048;
        #keepalive 1024 slice_key=$remote_addr$remote_port slice_conn=2;
        #keepalive_timeout 540000;
    }

    upstream melon_443 {
        server 192.168.78.4:443;
        #check type=tls_hello default_down=false timeout=3000 rise=3 fall=3 interval=2000 server_name=www.111ifeng2222.com;

        check interval=10000 rise=2 fall=5 timeout=5000 type=https;
        check_http_send "HEAD /ssasdfaa12344411 HTTP/1.0\r\n\r\n";
        check_http_expect_alive http_2xx http_3xx;
    }

    server {
        listen       88;
        server_name  localhost;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;
        #access_log  "pipe:rollback logs/host.access_log interval=1d baknum=7 maxsize=2G"  main;

        #req_status server;

        location /keepalive {
            proxy_http_version 1.1;
			proxy_set_header  Connection $connection_keepalive;
            proxy_set_header  Upgrade $http_upgrade;
	        proxy_pass http://melon_80_keepalive/;
        }

        location /auto_keepalive {
            proxy_http_version 1.1;
			proxy_set_header  Connection $connection_upgrade;
            proxy_set_header  Upgrade $http_upgrade;
	        proxy_pass http://melon_80_keepalive/;
        }

        location / {
	        #proxy_pass http://melon_80/;
	        proxy_pass https://melon_443/;
            proxy_http_version 1.1;
            #proxy_set_header Connection "";
            #proxy_set_header $connection_upgrade;
        }
    }

    server {
        listen       9527 ssl;
        server_name  localhost;
        #access_log  logs/access.log  main;

        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_certificate server.crt;
        ssl_certificate_key server.key;
        ssl_ciphers ALL;

        location / {
            return 404;
        }
    }

    #server {
    #    listen       9527;
    #    server_name  localhost;
    #    proxy_buffering off;

    #    proxy_set_header Host $http_host;

    #    #proxy_ssl_protocols TLSv1.3;
    #    #proxy_ssl_protocols TLSv1.1;
    #    #proxy_ssl_protocols TLSv1.2;

    #    proxy_ssl_protocols TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    #    proxy_ssl_session_reuse on;
    #    proxy_ssl_name $http_host;
    #    proxy_ssl_verify off;
    #    proxy_ssl_server_name on;

    #    location / {
    #        proxy_pass https://melon_443/;
    #    }

    #    #location / {
    #    #    return 200;
    #    #}
    #    #location /check_req_status {
    #    #    req_status_show server;
    #    #}
    #}

    # upstream for Dubbo rpc to Dubbo provider server listening on 127.0.0.1:20880
    #
    #upstream dubbo_backend {
    #    multi 1;
    #    server 127.0.0.1:20880;
    #}

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}

stream {
    # 定义syslog服务器
    upstream syslog_server {
        server 1.1.1.1:601;
    }

    # 监听本地端口，用于接收日志数据
    server {
        listen 127.0.0.1:12345;
        proxy_pass syslog_server;
    }
}
